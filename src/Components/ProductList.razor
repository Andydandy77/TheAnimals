@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="input-group">
    <div class="form-outline">
        <input type="search" class="form-control" @bind="@SearchTerm" />
    </div>
    <button type="button" class="btn btn-primary mb-3 searchButton" @onclick="StateHasChanged">Search</button>
    <button type="button" class="btn btn-primary mb-3 searchButton" @onclick="ClearSearch">Clear</button>

</div>

<div class="dropdown filterButton">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        @GetCategoryTitle()
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var category in GetCategories())
        {
            <button class="dropdown-item" type="button" @onclick="(e => SetSelectedCategory(category))">@category</button>
        }

    </div>
</div>

<div class="dropdown filterButton">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        @GetCuisineTitle()
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var cuisine in GetCuisines())
        {
            <button class="dropdown-item" type="button" @onclick="(e => SetSelectedCuisine(cuisine))">@cuisine</button>
        }

    </div>
</div>

<div class="dropdown filterButton">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        @GetCityTitle()
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var city in GetCities())
        {
            <button class="dropdown-item" type="button" @onclick="(e => SetSelectedCity(city))">@city</button>
        }

    </div>
</div>

<div class="dropdown filterButton">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        @GetPriceTitle()
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var price in GetPrices())
        {
            <button class="dropdown-item" type="button" @onclick="(e => SetPriceRange(price))">@price</button>
        }

    </div>
</div>

<button class="btn btn-primary filterButton" type="button" @onclick="(e => ResetFilters())">Reset Filters</button>

<button class="btn btn-success" type="button" @onclick="(e => SortDishesByRating())">Get Me the Best!</button>

<div class="card w-100">
    @if (getTheBest)
    {
        foreach (var product in GetDishesByRating())
        {

            if (WillDishShow(product))
            {
                <div class="row">
                    <div class="col-sm-4">
                        <img src=@product.Image class="card-img-top h-100">
                    </div>
                    <div class="col-sm-7">
                        <div class="card-body">
                            <h5 class="card-title">@product.Title</h5>
                            <h6 class="text-black-50">@product.Description</h6>
                            <small class="text-muted">
                                <button @onclick="(e => SelectProduct(product.Id))"
                                        id="MoreInfoButton_@product.Id" data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                                    More Info
                                </button>
                            </small>
                        </div>
                    </div>
                </div>
            }

        }
    }
    else
    {
        foreach (var product in GetDishes())
        {

            if (WillDishShow(product))
            {
                <div class="row">
                    <div class="col-sm-4">
                        <img src=@product.Image class="card-img-top h-100">
                    </div>
                    <div class="col-sm-7">
                        <div class="card-body">
                            <h5 class="card-title">@product.Title</h5>
                            <h6 class="text-black-50">@product.Description</h6>
                            <small class="text-muted">
                                <button @onclick="(e => SelectProduct(product.Id))"
                                        id="MoreInfoButton_@product.Id" data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                                    More Info
                                </button>
                            </small>
                        </div>
                    </div>
                </div>
            }

        }
    }
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                            <p class="card-text">Price: @selectedProduct.Price</p>
                            <p class="card-text">Cuisine: @selectedProduct.Cuisine</p>
                            <p class="card-text">Location: @selectedProduct.Address @selectedProduct.City,@selectedProduct.State </p>
                            <p class="card-text">Reviews:</p>

                            @{
                                if (selectedProduct.Reviews != null) {
                                // First show all the existing Reviews
                                    foreach (var review in selectedProduct.Reviews)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                "@review.Review"
                                            </div>
                                        </div>
                                     }
                                }

                                // If this is a new review, then add the Input boxes for it, else show the Add review Button
                                if (NewReview)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <input type="text" @onchange="(e) => UpdateReviewText(e.Value.ToString())" value="@NewReviewText" />
                                            <button @onclick="(e => AddReview())" class="btn btn-success" data-toggle="modal">Save Review</button>
                                        </div>
                                    </div>
                                }

                                // If this is not a new review, then show the buttons for Adding review and Close
                                if (NewReview == false)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <button @onclick="(e => ShowNewReviewInput())" id="AddComment" class="btn btn-primary">Add Comment</button>
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                }

                            }
                            
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;
    string selectedCategory = "All";
    string selectedCity = "All";
    string selectedCuisine = "All";
    bool getTheBest = false;
    int currentRating = 0;
    int voteCount = 0;
    int low = 0;
    int high = 1000;
    string voteLabel;
    string SearchTerm { get; set; }
    // New Review Flag to show the input box or not
    bool NewReview = false;
    // Next Reivew Text is what the comment text is
    string NewReviewText = "";

    /// <summary>
    /// Enable the New Comment Entry by setting the NewComment flag
    /// </summary>
    /// <param name="comment"></param>
    void ShowNewReviewInput()
    {
        // Setting the new Comment flag to true will show the input box
        NewReview = true;
    }

    /// <summary>
    /// Set the New Comment Text variable to the data just entered in the input box
    /// </summary>
    /// <param name="newCommentText"></param>
    void UpdateReviewText(string newReviewText)
    {
        NewReviewText = newReviewText;
    }

    /// <summary>
    /// Add the comment to the product
    /// Best to refactor this to be a method to call in the Middle Tier Data service, rathern than putting the logic here...
    /// </summary>
    /// <param name="comment"></param>
    void AddReview()
    {
        // Refactor to be a call to the middle tier
        // ProductService.AddCommentToProduct(selectedProduct, comment);


        // Add it to the Comment List
        selectedProduct.Reviews.Add(new ReviewModel() { Review = NewReviewText });

        // Call for the Product to be saved
        ProductService.UpdateData(selectedProduct);

        // Set the NewComment flag to false to hide the input box
        NewReview = false;
    }


    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    void SetSelectedCategory(string category)
    {
        selectedCategory = category;

    }

    string GetSelectedCategory()
    {
        return selectedCategory;
    }

    void SetSelectedCuisine(string cuisine)
    {
        selectedCuisine = cuisine;
    }

    string GetSelectedCuisine()
    {
        return selectedCuisine;
    }

    string GetSelectedCity()
    {
        return selectedCategory;
    }

    void SetSelectedCity(string city)
    {
        selectedCity = city;

    }

    string SetSelectedCity()
    {
        return selectedCategory;
    }

    void SortDishesByRating()
    {
        getTheBest = true;
    }

    void SetPriceRange(string priceRange)
    {
        string[] prices = priceRange.Split('-');
        low = Int32.Parse(prices[0]);
        high = Int32.Parse(prices[1]);
    }


    List<string> GetCategories()
    {
        List<string> categories = new List<string>();
        var products = ProductService.GetAllData();

        foreach (var product in products)
        {
            if (!categories.Contains(product.Category))
            {
                categories.Add(product.Category);
            }
        }
        return categories;
    }

    List<string> GetCities()
    {
        List<string> cities = new List<string>();
        var products = ProductService.GetAllData();

        foreach (var product in products)
        {
            if (!cities.Contains(product.City))
            {
                cities.Add(product.City);
            }
        }
        return cities;
    }

    List<string> GetPrices()
    {
        List<string> prices = new List<string>();
        prices.Add("0-5");
        prices.Add("5-15");
        prices.Add("15-25");
        prices.Add("25-35");
        prices.Add("35-50");
        prices.Add("50-100");

        return prices;
    }

    List<string> GetCuisines()
    {
        List<string> cuisines = new List<string>();
        var products = ProductService.GetAllData();

        foreach (var product in products)
        {
            if (!cuisines.Contains(product.Cuisine))
            {
                cuisines.Add(product.Cuisine);
            }
        }
        return cuisines;
    }

    void ResetFilters()
    {
        selectedCategory = "All";
        selectedCity = "All";
        selectedCuisine = "All";
        getTheBest = false;
        high = 1000;
        low = 0;
    }

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    bool WillDishShow(ProductModel product)
    {
        if (selectedCategory == "All" || selectedCategory == product.Category)
        {
            if (selectedCity == "All" || selectedCity == product.City)
            {
                if (selectedCuisine == "All" || selectedCuisine == product.Cuisine)
                {
                    if ((product.Price <= high && product.Price >= low) || high == 1000)
                    {
                        return true;

                    }
                }
            }

        }
        return false;

    }


    IEnumerable<ProductModel> GetDishes()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            return ProductService.GetAllData();
        }
        return GetSearchDishes();

    }

    IEnumerable<ProductModel> GetDishesByRating()
    {
        return ProductService.GetAllDataSortedByRating();
    }


    IEnumerable<ProductModel> GetSearchDishes()
    {
        IEnumerable<ProductModel> ProductList = ProductService.GetAllData();

        foreach (var product in ProductList)
        {
            ProductList = ProductList.Where(s => s.HasSearchQuery(SearchTerm));

        }

        return ProductList;
    }

    void ClearSearch()
    {
        SearchTerm = null;
    }

    string GetCategoryTitle()
    {
        return selectedCategory == "All" ? "Category" : selectedCategory;
    }

    string GetCuisineTitle()
    {
        return selectedCuisine == "All" ? "Cuisine" : selectedCuisine;
    }

    string GetCityTitle()
    {
        return selectedCity == "All" ? "City" : selectedCity;
    }

    string GetPriceTitle()
    {
        return high == 1000 ? "Price" : "" + low + "-" + high;
    }


}