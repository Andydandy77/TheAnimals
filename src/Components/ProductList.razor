@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="input-group">
    <div class="form-outline">
        <input type="search" class="form-control" @bind="@SearchTerm" />
    </div>
    <button type="button" class="btn btn-primary mb-3" @onclick="StateHasChanged">Search</button>
    <button type="button" class="btn btn-primary mb-3" @onclick="ClearSearch">Clear</button>

</div>

<div class="dropdown filterButton">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Filter by category
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var category in getCategories())
        {
            <button class="dropdown-item" type="button" @onclick="(e => setSelectedCategory(category))">@category</button>
        }

    </div>
</div>

<div class="dropdown filterButton">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Filter by cuisine
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var cuisine in getCuisines())
        {
            <button class="dropdown-item" type="button" @onclick="(e => setSelectedCuisine(cuisine))">@cuisine</button>
        }

    </div>
</div>

<div class="dropdown filterButton">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Filter by city
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var city in getCities())
        {
            <button class="dropdown-item" type="button" @onclick="(e => setSelectedCity(city))">@city</button>
        }

    </div>
</div>

<button class="btn btn-primary filterButton" type="button" @onclick="(e => resetFilters())">Reset Filters</button>

<div class="card-columns">
    @foreach (var product in GetDishes())
    {

        if (willDishShow(product))
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.Title</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <button @onclick="(e => SelectProduct(product.Id))"
                                data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }

    }
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;
    string selectedCategory = "All";
    string selectedCity = "All";
    string selectedCuisine = "All";
    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;
    string SearchTerm { get; set; }


    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    void setSelectedCategory(string category)
    {
        selectedCategory = category;

    }

    string getSelectedCategory()
    {
        return selectedCategory;
    }

    void setSelectedCuisine(string cuisine)
    {
        selectedCuisine = cuisine;
    }

    string getSelectedCuisine()
    {
        return selectedCuisine;
    }

    string getSelectedCity()
    {
        return selectedCategory;
    }

    void setSelectedCity(string city)
    {
        selectedCity = city;

    }

    string setSelectedCity()
    {
        return selectedCategory;
    }


    List<string> getCategories()
    {
        List<string> categories = new List<string>();
        var products = ProductService.GetAllData();

        foreach (var product in products)
        {
            if (!categories.Contains(product.Category))
            {
                categories.Add(product.Category);
            }
        }
        return categories;
    }

    List<string> getCities()
    {
        List<string> cities = new List<string>();
        var products = ProductService.GetAllData();

        foreach (var product in products)
        {
            if (!cities.Contains(product.City))
            {
                cities.Add(product.City);
            }
        }
        return cities;
    }

    List<string> getCuisines()
    {
        List<string> cuisines = new List<string>();
        var products = ProductService.GetAllData();

        foreach (var product in products)
        {
            if (!cuisines.Contains(product.Cuisine))
            {
                cuisines.Add(product.Cuisine);
            }
        }
        return cuisines;
    }

    void resetFilters()
    {
        selectedCategory = "All";
        selectedCity = "All";
        selectedCuisine = "All";
    }

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    bool willDishShow(ProductModel product)
    {
        if (selectedCategory == "All" || selectedCategory == product.Category)
        {
            if (selectedCity == "All" || selectedCity == product.City)
            {
                if (selectedCuisine == "All" || selectedCuisine == product.Cuisine)
                {
                    return true;
                }
            }

        }
        return false;

    }


    IEnumerable<ProductModel> GetDishes()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            return ProductService.GetAllData();
        }
        return GetSearchDishes();

    }


    IEnumerable<ProductModel> GetSearchDishes()
    {
        IEnumerable<ProductModel> ProductList = ProductService.GetAllData();

        foreach (var product in ProductList)
        {
            ProductList = ProductList.Where(s => s.HasSearchQuery(SearchTerm));

        }

        return ProductList;
    }

    void ClearSearch()
    {
        SearchTerm = null;
    }

}